"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et la trace
M8
# Data importation
gopher <- read.csv("gopher.csv", header=TRUE, stringsAsFactors=TRUE, sep=";", dec=".") %>%
mutate(standprev = (prev - mean(prev)) / sd(prev),
H = ifelse(prev <= 25, 0, 1),
Cov_2004 = ifelse(year == 2004, 1, 0),
Cov_2005 = ifelse(year == 2005, 1, 0),
Cov_2006 = ifelse(year == 2006, 1, 0))
disc_year_prev_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + alpha_0 * Cov_2004 + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
disc_year_prev_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et la trace
M8
traceplot(M8, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres estimés et leur distribution
res8 <- M8$BUGSoutput$sims.matrix %>%
as.data.frame()
# Calculating the mean number of shells per individual
shells8 <- matrix(NA, ncol=nrow(gopher), nrow=nrow(res7))
for (i in 1:nrow(gopher)){
shells8[, i] <- gopher$Area[i] * exp(res$mu.0 + res$b.prev * gopher$H[i] +
res8$alpha_0 * gopher$Cov_2004[i] +
res8$alpha_1 * gopher$Cov_2005[i] +
res8$alpha_2 * gopher$Cov_2006[i])
}
hist(shells8)
mean(shells8)
# Récupérons le DIC
DIC8 <- M8$BUGSoutput$DIC
gopher$Cov_2004
gopher$Cov_2005
gopher$Cov_2006
gopher$year %>%
length(
)
gopher$shells
gopher$H
gopher$Area
gopher$Cov_200
gopher$Cov_2004
gopher$Cov_2005
gopher$Cov_2006
res$mu.0
res$b.prev
gopher$H
res8$alpha_0
gopher$Cov_2004
res8$alpha_1
gopher$Cov_2005
res8$alpha_2
gopher$Cov_2006
res$mu.0 + res$b.prev * gopher$H[i] +
res8$alpha_0 * gopher$Cov_2004[i] +
res8$alpha_1 * gopher$Cov_2005[i] +
res8$alpha_2 * gopher$Cov_2006[i]
# Regardons le modèle et la trace
M8
disc_year_prev_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et la trace
M8
traceplot(M8, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres estimés et leur distribution
res8 <- M8$BUGSoutput$sims.matrix %>%
as.data.frame()
# Calculating the mean number of shells per individual
shells8 <- matrix(NA, ncol=nrow(gopher), nrow=nrow(res7))
for (i in 1:nrow(gopher)){
shells8[, i] <- gopher$Area[i] * exp(res$mu.0 + res$b.prev * gopher$H[i] +
res8$alpha_0 * gopher$Cov_2004[i] +
res8$alpha_1 * gopher$Cov_2005[i] +
res8$alpha_2 * gopher$Cov_2006[i])
}
hist(shells8)
mean(shells8)
# Récupérons le DIC
DIC8 <- M8$BUGSoutput$DIC
# On récupère les paramètres estimés et leur distribution
res8 <- M8$BUGSoutput$sims.matrix %>%
as.data.frame()
# Calculating the mean number of shells per individual
shells8 <- matrix(NA, ncol=nrow(gopher), nrow=nrow(res7))
for (i in 1:nrow(gopher)){
shells8[, i] <- gopher$Area[i] * exp(res$mu.0 + res$b.prev * gopher$H[i] + res8$alpha_0 * gopher$Cov_2004[i] + res8$alpha_1 * gopher$Cov_2005[i] + res8$alpha_2 * gopher$Cov_2006[i])
}
hist(shells8)
mean(shells8)
hist(shells8)
hist(shells8, bins=100)
?hist
hist(shells8, breaks=100)
hist(shells8, breaks=1000)
hist(shells8)
disc_full_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M9 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_full_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces
M9
traceplot(M9, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# Récupérons les paramètres et regardons leur distribution
res9 <- M9$BUGSoutput$sims.matrix %>%
as.data.frame()
# Rétrotransformation
shells9 <- matrix(NA, nrow=nrow(res9), ncol=nrow(gopher))
for (i in 1:nrow(gopher)){
shells9[, i] <- gopher$A[i] * exp(res9$mu.0 +
res9$b.prev * gopher$H[i] +
res9$alpha_0 * gopher$Cov_2004[i] +
res9$alpha_1 * gopher$Cov_2005[i] +
res9$alpha_2 * gopher$Cov_2006[i] +
rnorm(1, mean=0, sd=res9$sd.s))
}
hist(shells9)
mean(shells9)
# Récupérons le DIC
DIC9 <- M9$BUGSoutput$DIC
gopher$H
disc_year_prev_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et la trace
M8
traceplot(M8, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres estimés et leur distribution
res8 <- M8$BUGSoutput$sims.matrix %>%
as.data.frame()
# Calculating the mean number of shells per individual
shells8 <- matrix(NA, ncol=nrow(gopher), nrow=nrow(res7))
for (i in 1:nrow(gopher)){
shells8[, i] <- gopher$Area[i] * exp(res$mu.0 + res$b.prev * gopher$H[i] + res8$alpha_0 * gopher$Cov_2004[i] + res8$alpha_1 * gopher$Cov_2005[i] + res8$alpha_2 * gopher$Cov_2006[i])
}
hist(shells8)
mean(shells8)
# Récupérons le DIC
DIC8 <- M8$BUGSoutput$DIC
# On récupère les paramètres estimés et leur distribution
res8 <- M8$BUGSoutput$sims.matrix %>%
as.data.frame()
# Calculating the mean number of shells per individual
shells8 <- matrix(NA, ncol=nrow(gopher), nrow=nrow(res8))
for (i in 1:nrow(gopher)){
shells8[, i] <- gopher$Area[i] * exp(res8$mu.0 + res8$b.prev * gopher$H[i] + res8$alpha_0 * gopher$Cov_2004[i] + res8$alpha_1 * gopher$Cov_2005[i] + res8$alpha_2 * gopher$Cov_2006[i])
}
hist(shells8)
mean(shells8)
knitr::opts_chunk$set(echo = TRUE)
# Chargement des pakages nécessaires
require("anyLib")
anyLib(c("tidyverse", "cowplot", "R2jags", "lme4", "gtsummary", "plyr"))
# Importation du fichier
gopher <- read.csv(file = "./gopher.csv", header = TRUE, sep = ";", dec=".", stringsAsFactors = TRUE) %>%
mutate(year = as.character(year),
total_turtle = density * Area,
standprev = (prev - mean(prev)) / sd(prev),
H = ifelse(prev <= 25, 0, 1),
Cov_2004 = ifelse(year == 2004, 1, 0),
Cov_2005 = ifelse(year == 2005, 1, 0),
Cov_2006 = ifelse(year == 2006, 1, 0))
summary(gopher)
ggplot(data=gopher, aes(x=prev)) +
geom_histogram(bins=10, fill="blue", color="black") +
geom_vline(aes(xintercept=mean(prev)))+
geom_vline(aes(xintercept=median(prev)))+
labs(caption = "Figure 1 : Distribution de la prévalence pour Mycoplasma agassizii",
x="Prévalence pour Mycoplasma agassizii",
y="Comptage") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
ggplot(data=gopher, aes(x=prev)) +
geom_histogram(bins=10, fill="blue", color="black") +
geom_vline(aes(xintercept=mean(prev)), col = "red") +
geom_label(aes(x=mean(prev), y=4)) +
geom_vline(aes(xintercept=median(prev)), col = "blue") +
labs(caption = "Figure 1 : Distribution de la prévalence pour Mycoplasma agassizii",
x="Prévalence pour Mycoplasma agassizii",
y="Comptage") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
ggplot(data=gopher, aes(x=prev)) +
geom_histogram(bins=10, fill="blue", color="black") +
geom_vline(aes(xintercept=mean(prev)), col = "red") +
geom_label(aes(x=mean(prev), y=4, label="Mean"), col="red") +
geom_vline(aes(xintercept=median(prev)), col = "blue") +
labs(caption = "Figure 1 : Distribution de la prévalence pour Mycoplasma agassizii",
x="Prévalence pour Mycoplasma agassizii",
y="Comptage") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
ggplot(data=gopher, aes(x=prev)) +
geom_histogram(bins=10, fill="blue", color="black") +
geom_vline(aes(xintercept=mean(prev)), col = "red") +
geom_label(aes(x=mean(prev), y=4, label="Mean"), col="red") +
geom_vline(aes(xintercept=median(prev)), col = "blue") +
geom_label(aes(x=median(prev), y=6, label="Median"), col="blue")
labs(caption = "Figure 1 : Distribution de la prévalence pour Mycoplasma agassizii",
x="Prévalence pour Mycoplasma agassizii",
y="Comptage") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
