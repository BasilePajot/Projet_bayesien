inits = init,
model.file = year_site_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC5 <- M5$BUGSoutput$DIC
random_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + gamma[site[i]] + b.prev * prev[i] + alpha_0* Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
for (j in 1:nb.sites){
gamma[j] ~ dnorm(0, tau.s)
}
# Priors
mu.0 ~ dnorm(0, 0.001)
sd.s ~ dunif(0, 100)
tau.s <- 1 / (sd.s * sd.s)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$standprev,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov_2004 = ifelse(gopher$year == 2004, 1, 0),
Cov_2005 = ifelse(gopher$year == 2005, 1, 0),
Cov_2006 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s","alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5,
"sd.s" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5,
"sd.s" = 1.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M6 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = random_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC6 <- M6$BUGSoutput$DIC
gopher_discont_prev <- function(){
for (i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + log(A[i])
}
mu.0 ~ dnorm(0, 0.001)
b.prev ~ dnorm(0, 0.001)
}
datax <- list(N = length(gopher$shells),
prev = gopher$H,
S = gopher$shells,
A = gopher$Area
)
init1 <- list(mu.0=0.5, b.prev=0.5)
init2 <- list(mu.0= -0.5, b.prev= -0.5)
inits <- list(init1, init2)
params <- c("mu.0", "b.prev")
nb.iterations <- 9000
nb.burnin <- 4500
M7 <- jags(data=datax,
inits=inits,
parameters.to.save = params,
model.file=gopher_discont_prev,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin=1,
quiet = TRUE
)
# Récupérons le DIC
DIC7 <- M7$BUGSoutput$DIC
disc_year_prev_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE
)
# Récupérons le DIC
DIC8 <- M8$BUGSoutput$DIC
disc_full_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha_0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov_2004 = gopher$Cov_2004,
Cov_2005 = gopher$Cov_2005,
Cov_2006 = gopher$Cov_2006
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha_0", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha_0" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha_0" = -0.5,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M9 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_full_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1,
quiet = TRUE,
progress.bar = "none"
)
# Récupérons le DIC
DIC9 <- M9$BUGSoutput$DIC
data.frame(
row.names = c("Continus", paste0("M", rep(1, 6, 1)), "Discontinus", paste0("M", rep(7, 9, 1))),
DICs = c("", DIC1, DIC2, DIC3, DIC4, DIC5, DIC6, "", DIC7, DIC8, DIC9)
)
paste0("M", rep(1, 6, 1))
data.frame(
row.names = c("Continus", paste0("M", seq(1, 6, 1)), "Discontinus", paste0("M", seq(7, 9, 1))),
DICs = c("", DIC1, DIC2, DIC3, DIC4, DIC5, DIC6, "", DIC7, DIC8, DIC9)
)
knitr::opts_chunk$set(echo = TRUE)
# Import libraries
require("anyLib")
anyLib(c("tidyverse", "R2jags", "lme4", "cowplot"))
# Set random seed
set.seed(2023)
# Data importation
gopher <- read.csv("gopher.csv", header=TRUE, stringsAsFactors=TRUE, sep=";", dec=".") %>%
mutate(standprev = (prev - mean(prev)) / sd(prev),
H = ifelse(prev <= 25, 0, 1),
Cov_2004 = ifelse(year == 2004, 1, 0),
Cov_2005 = ifelse(year == 2005, 1, 0),
Cov_2006 = ifelse(year == 2006, 1, 0))
null_model <- function(){
# The null model does not take into account any of the variables. We just want to see the evolution of the number of shells
# Likelihood
for (i in 1:N){  # Loop over years
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
}
# Now, we can make list of the data to use in the jags function
datax <- list(
N = gopher$year  %>%
length(),
S = gopher$shells,        # Number of shells
A = gopher$Area          # Area offset
)
# Parameters to estimate
params <- c("mu.0")
# Initialising the chains
init1 <- list(mu.0 = -0.5)
init2 <- list(mu.0 = 0.5)
init <- list(init1, init2)
# Define the iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model using jags
M1 <- jags(
data = datax,
inits = init,
parameters.to.save = params,
model.file = null_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces des chaines
M1
traceplot(M1, mfrow=c(1, 2), ask=FALSE)
par(mfrow = c(1, 1))
# Extraction des résultats
res <- M1$BUGSoutput$sims.matrix %>%
as.data.frame()
# Histogramme des paramètres à estimer
hist(res$mu.0)
# Transformation réciproque
shells <- gopher$Area  * exp(res$mu.0)
hist(shells)
mean(shells)
# On récupère le DIC
DIC1 <- M1$BUGSoutput$DIC
# The prevalence model
prevalence_model <- function(){
# We here use the null model and add the prevalence and a its coefficient
# Likelihood
for (i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
}
# We make a list of the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$standprev,
A = gopher$Area
)
# Parameters to estimate
params <- c("mu.0", "b.prev")
# We initialise the model
init1 <- list("mu.0"=0.5, "b.prev"=0.5)
init2 <- list("mu.0"=-0.5, "b.prev"=-0.5)
init <- list(init1, init2)
# We define the iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# We run the model
M1 <- jags(
data = datax,
inits = init,
parameters.to.save = params,
model.file = prevalence_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin=1
)
# Regardons le modèle
M1
# Regardons les traces
traceplot(M1,mfrow = c(1, 3), varname = c('mu.0','b.prev','deviance'), ask = FALSE)
par(mfrow=c(1, 1))
# On récupère les résultats et on fait des histogrammes
res1 <- M1$BUGSoutput$sims.matrix %>%
as.data.frame()
# Tentative de réro-transformation
shells1 <- matrix(NA,ncol=nrow(gopher),nrow=nrow(res))
for (i in 1:nrow(gopher)){
shells1[,i] <-gopher$Area[i] * exp(res1$mu.0 + res1$b.prev * gopher$standprev[i])
}
hist(shells1)
mean(shells1)
# On récupère le DIC
DIC1 <- M1$BUGSoutput$DIC
# The null model function
null_year_model <- function(){
# The null model does not take into account any of the variables. We just want to see the evolution of the number of shells
# Likelihood
for (i in 1:N){  # Loop over years
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha_0 * Cov_2004[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Now, we can make list of the data to use in the jags function
datax <- list(
N = gopher$year  %>%
length(),
S = gopher$shells,        # Number of shells
A = gopher$Area,          # Area offset
Cov_2005 = gopher$Cov_2005,  # Effect of the year 2005
Cov_2006 = gopher$Cov_2006   # Effect of the year 2006
)
# Parameters to estimate
params <- c("mu.0", "alpha_0", "alpha_1", "alpha_2")
# Initialising the chains
init1 <- list(mu.0 =-0.5, alpha_0=-0.5, alpha_1=-0.5, alpha_2=-0.5)
init2 <- list(mu.0 = 0.5, alpha_0=0.5, alpha_1=0.5, alpha_2=0.5)
init <- list(init1, init2)
# Define the iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model using jags
M3 <- jags(
data = datax,
inits = init,
parameters.to.save = params,
model.file = null_year_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$standprev,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov_2005 = ifelse(gopher$year == 2005, 1, 0),
Cov_2006 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha_1", "alpha_2")
random_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha_1 * Cov_2005[i] + alpha_2 * Cov_2006[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha_1 ~ dnorm(0, 1/100)
alpha_2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$standprev,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov_2005 = ifelse(gopher$year == 2005, 1, 0),
Cov_2006 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha_1", "alpha_2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha_1" = 0.5,
"alpha_2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha_1" = -0.5,
"alpha_2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M6 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = random_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces
M6
traceplot(M6, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres et on regarde leur distribution
res <- M6$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
hist(res$alpha_2)
hist(res$sd.s)
