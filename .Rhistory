model.file=gopher_discont_prev,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin=1)
# Regardons le modèle et les traces
M7
traceplot(M7, mfrow=c(2, 3), ask=FALSE)
par(mfrow = c(1, 1))
# Récupérons les paramètres et regardons leur distribution
res <- M7$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
# Rétrotransformation
shells <- gopher$Area * exp(res$mu.0 + res$b.prev * gopher$H)
hist(shells)
mean(shells)
# Récupérons le DIC
DIC7 <- M7$BUGSoutput$DIC
disc_year_prev_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + alpha.y.1 * Cov.y.1[i] + alpha.y.2 * Cov.y.2[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha.y.1 ~ dnorm(0, 1/100)
alpha.y.2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
Cov.y.1 = ifelse(gopher$year == 2005, 1, 0),
Cov.y.2 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "alpha.y.1", "alpha.y.2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha.y.1" = 0.5,
"alpha.y.2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha.y.1" = -0.5,
"alpha.y.2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et la trace
M8
traceplot(M8, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres estimés et leur distribution
res <- M8$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
# Calculating the mean number of shells per individual
shells <- gopher$Area * exp(res$mu.0 + res$b.prev * gopher$H + res$alpha.y.1 * gopher$Cov.y.1 + res$alpha.y.2 * gopher$Cov.y.2)
hist(shells)
mean(shells)
# Récupérons le DIC
DIC8 <- M8$BUGSoutput$DIC
disc_full_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha.y.1 * Cov.y.1[i] + alpha.y.2 * Cov.y.2[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha.y.1 ~ dnorm(0, 1/100)
alpha.y.2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov.y.1 = ifelse(gopher$year == 2005, 1, 0),
Cov.y.2 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha.y.1", "alpha.y.2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha.y.1" = 0.5,
"alpha.y.2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha.y.1" = -0.5,
"alpha.y.2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M9 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_full_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces
M9
traceplot(M9, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# Récupérons les paramètres et regardons leur distribution
res <- M9$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
hist(res$sd.s)
# Rétrotransformation
simulated_shells <- rep(NA, nrow(res))
for (i in 1:nrow(res)){
lambda <- gopher$Area * exp(res$mu.0[i] + res$alpha.y.1[i] * gopher$Cov.y.1 + res$alpha.y.2[i] * gopher$Cov.y.2 + res$b.prev[i] * gopher$H + rnorm(1, mean=0, sd=res$sd.s[i]))
simulated_shells[i] <- rpois(1, lambda)
}
hist(simulated_shells)
mean(simulated_shells)
# Récupérons le DIC
DIC9 <- M9$BUGSoutput$DIC
DICs <- cbind(DIC1, DIC2,
DIC3, DIC4,
DIC5, DIC6,
DIC7, DIC8,
DIC9) %>%
as.data.frame()
View(DICs)
# Rétrotransformation : idée 2
simulated_shells <- gopher$Area * exp(res$mu.0 + res$alpha.y.1 * gopher$Cov.y.1 + res$alpha.y.2 * gopher$Cov.y.2 + res$b.prev * gopher$standprev + rnorm(1, mean=0, sd=res$sd.s))
# Import libraries
require("anyLib")
anyLib(c("tidyverse", "R2jags", "lme4", "cowplot"))
# Set random seed
set.seed(2023)
# Data importation
gopher <- read.csv("gopher.csv", header=TRUE, stringsAsFactors=TRUE, sep=";", dec=".") %>%
mutate(standprev = (prev - mean(prev)) / sd(prev),
H = ifelse(prev <= 25, 0, 1),
Cov.y.1 = ifelse(year == 2005, 1, 0),
Cov.y.2 = ifelse(year == 2006, 1, 0))
random_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha.y.1 * Cov.y.1[i] + alpha.y.2 * Cov.y.2[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha.y.1 ~ dnorm(0, 1/100)
alpha.y.2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$standprev,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov.y.1 = ifelse(gopher$year == 2005, 1, 0),
Cov.y.2 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha.y.1", "alpha.y.2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha.y.1" = 0.5,
"alpha.y.2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha.y.1" = -0.5,
"alpha.y.2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M6 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = random_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces
M6
traceplot(M6, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres et on regarde leur distribution
res <- M6$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
hist(res$sd.s)
# Rétrotransformation : idée 1
simulated_shells <- rep(NA, nrow(res))
for (i in 1:nrow(res)){
lambda <- gopher$Area * exp(res$mu.0[i] + res$alpha.y.1[i] * gopher$Cov.y.1 + res$alpha.y.2[i] * gopher$Cov.y.2 + res$b.prev[i] * gopher$standprev + rnorm(1, mean=0, sd=res$sd.s[i]))
simulated_shells[i] <- rpois(1, lambda)
}
hist(simulated_shells)
mean(simulated_shells)
# Rétrotransformation : idée 2
simulated_shells <- gopher$Area * exp(res$mu.0 + res$alpha.y.1 * gopher$Cov.y.1 + res$alpha.y.2 * gopher$Cov.y.2 + res$b.prev * gopher$standprev + rnorm(1, mean=0, sd=res$sd.s))
hist(simulated_shells)
mean(simulated_shells)
# Récupérons le DIC
DIC6 <- M6$BUGSoutput$DIC
### Model with discontinuous prevalence ###
## load libraries ##
library(tidyverse)
library(cowplot)
library(R2jags)
## import dataset
gopher <- read.csv(file = "./gopher.csv", header = TRUE, sep = ";", dec=".", stringsAsFactors = TRUE)
gopher$year<-as.factor(gopher$year) # set year as factor
gopher$standprev<-(gopher$prev-mean(gopher$prev))/sd(gopher$prev) #standardize prev
gopher$H<-ifelse(gopher$prev>= 25,1,0) #tranform prev as discontinuous with H=0 if prev<25% and H=1 if prev>=25%
set.seed(2023)
gopher_discont_prev <-function(){
for (i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * disc_prev[i] + log(A[i])
}
mu.0 ~ dnorm(0,0.001)
b.prev ~ dnorm(0,0.001)
}
datax <- list(N = length(gopher$shells),
disc_prev = gopher$H,
S = gopher$shells,
A = gopher$Area
)
init1 <- list(mu.0=0.5,b.prev=0.5)
init2 <- list(mu.0= -0.5,b.prev= -0.5)
inits <- list(init1,init2)
params <- c("mu.0","b.prev")
M7 <- jags(data=datax,
inits=inits,
parameters.to.save = params,
model.file=gopher_discont_prev,
n.chains = 2,
n.iter = 9000,
n.burnin = 4500,
n.thin=1)
M7
#
traceplot(M7,mfrow=c(3,1),varname=c('mu.0','b.prev','deviance'),ask=FALSE)
head(M7$BUGSoutput$sims.matrix)
acf(M7$BUGSoutput$sims.matrix[,2])
knitr::opts_chunk$set(echo = TRUE)
gopher_discont_prev <-function(){
for (i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + log(A[i])
}
mu.0 ~ dnorm(0,0.001)
b.prev ~ dnorm(0,0.001)
}
datax <- list(N = length(gopher$shells),
prev = gopher$H,
S = gopher$shells,
A = gopher$Area
)
init1 <- list(mu.0=0.5,b.prev=0.5)
init2 <- list(mu.0= -0.5,b.prev= -0.5)
inits <- list(init1,init2)
params <- c("mu.0","b.prev")
nb.iterations <- 9000
nb.burnin <- 4500
M7 <- jags(data=datax,
inits=inits,
parameters.to.save = params,
model.file=gopher_discont_prev,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin=1)
# Regardons le modèle et les traces
M7
traceplot(M7, mfrow=c(2, 3), ask=FALSE)
par(mfrow = c(1, 1))
# Récupérons les paramètres et regardons leur distribution
res <- M7$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
# Rétrotransformation
shells <- gopher$Area * exp(res$mu.0 + res$b.prev * gopher$H)
hist(shells)
mean(shells)
# Récupérons le DIC
DIC7 <- M7$BUGSoutput$DIC
gopher_discont_prev <-function(){
for (i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + log(A[i])
}
mu.0 ~ dnorm(0,0.001)
b.prev ~ dnorm(0,0.001)
}
datax <- list(N = length(gopher$shells),
prev = gopher$H,
S = gopher$shells,
A = gopher$Area
)
init1 <- list(mu.0=0.5,b.prev=0.5)
init2 <- list(mu.0= -0.5,b.prev= -0.5)
inits <- list(init1,init2)
params <- c("mu.0","b.prev")
nb.iterations <- 9000
nb.burnin <- 4500
M7 <- jags(data=datax,
inits=inits,
parameters.to.save = params,
model.file=gopher_discont_prev,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin=1)
# Regardons le modèle et les traces
M7
traceplot(M7, mfrow=c(1, 3), ask=FALSE)
par(mfrow = c(1, 1))
# Récupérons les paramètres et regardons leur distribution
res <- M7$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
# Rétrotransformation
shells <- gopher$Area * exp(res$mu.0 + res$b.prev * gopher$H)
hist(shells)
mean(shells)
# Récupérons le DIC
DIC7 <- M7$BUGSoutput$DIC
?ranef
??ranef
library(lmer)
library(lme4)
?ranef
knitr::opts_chunk$set(echo = TRUE)
```{r echo=FALSE,results='hide',,warning=FALSE,message=FALSE}
# Chargement des pakages nécessaires
require("anyLib")
anyLib(c("tidyverse", "cowplot", "R2jags", "lme4", "gtsummary"))
library(tidyverse)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
# Chargement des pakages nécessaires
require("anyLib")
anyLib(c("tidyverse", "cowplot", "R2jags", "lme4", "gtsummary", "plyr"))
# Importation du fichier
gopher <- read.csv(file = "./gopher.csv", header = TRUE, sep = ";", dec=".", stringsAsFactors = TRUE)
gopher$year<-as.factor(gopher$year)
gopher$total_turtle<-gopher$Area*gopher$density
summary(gopher)
str(gopher)
view(gopher)
#Tableau de statistiques desciptives à faire
hist(gopher$shells)
ggplot(gopher, aes(x=prev, y=shells,color=Site, shape=year)) +
geom_point() +
facet_wrap(~Site)+
labs(caption= "Figure 1 : Le nombre de carapaces en fonction de la prevalence par site par année",
x = "Prévalence pour Mycoplasma agassizii",
y= "Nombre de carapaces ") +
theme(plot.caption = element_text(hjust = 0, face = "italic", size = 12))
hist(gopher$prev)
ggplot(data=goper, aes(x=prev)) +
geom_histogram()
ggplot(data=gopher, aes(x=prev)) +
geom_histogram()
ggplot(data=gopher, aes(x=prev)) +
geom_histogram() +
labs(caption = "Figure 2 : Distribution de la prévalence")
ggplot(data=gopher, aes(x=prev)) +
geom_histogram() +
labs(caption = "Figure 2 : Distribution de la prévalence")
ggplot(data=gopher, aes(x=prev)) +
geom_histogram() +
labs(caption = "Figure 2 : Distribution de la prévalence") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
ggplot(data=gopher, aes(x=prev)) +
geom_histogram(bins=10) +
labs(caption = "Figure 2 : Distribution de la prévalence") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
ggplot(data=gopher, aes(x=prev, fill="blue", color="black")) +
geom_histogram(bins=10) +
labs(caption = "Figure 2 : Distribution de la prévalence") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
ggplot(data=gopher, aes(x=prev), fill="blue", color="black") +
geom_histogram(bins=10) +
labs(caption = "Figure 2 : Distribution de la prévalence") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
ggplot(data=gopher, aes(x=prev)) +
geom_histogram(bins=10, fill="blue", color="black") +
labs(caption = "Figure 2 : Distribution de la prévalence") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
ggplot(data=gopher, aes(x=prev)) +
geom_histogram(bins=10, fill="blue", color="black", stat=density()) +
labs(caption = "Figure 2 : Distribution de la prévalence",
x="Prévalence",
y="Densité") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
# Libraries
require("anyLib")
anyLib(c("tidyverse"))
# Set seed for random numbers
set.seed(2020)
# Simulate data from Normal distribution
n <- 100
height <- rnorm(n, mean=170, sd=10)
ggplot(height %>% as.data.frame(), aes(x=height))+
geom_histogram(bins=30, fill="blue", color="black")
negloglik <- function(theta, data){
mu <- theta[1]
sigma <- theta[2]
x <- data
return(-sum(dnorm(x, mean=mu, sd=sigma, log=TRUE)))
}
negloglik(theta = c(150, 1), height)
fit <- optim(par=c(1, 1), fn=negloglik, data=height)
fit
# Plot the log of likelihood on the graph.
ggplot(height %>% as.data.frame(), aes(x=height))+
geom_histogram(bins=60, fill="blue", color="black")+
geom_line(aes(y=dnorm(x=height, mean=fit$par[1], sd=fit$par[2])*100), color="red", linewidth=2)
ggplot(data=gopher, aes(x=prev)) +
geom_histogram(bins=10, fill="blue", color="black") +
labs(caption = "Figure 2 : Distribution de la prévalence",
x="Prévalence",
y="Densité") +
theme(plot.caption = element_text(hjust=0, size=12, face="italic"))
