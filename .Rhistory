S = gopher$shells,        # Number of shells
A = gopher$Area,          # Area offset
Cov.y.1 = gopher$Cov.y.1,  # Effect of the year 2005
Cov.y.2 = gopher$Cov.y.2,  # Effect of the year 2006
prev = gopher$standprev    # Prevalence
)
# Parameters to estimate
params <- c("mu.0", "alpha.y.1", "alpha.y.2", "b.prev")
# Initialising the chains
init1 <- list(mu.0 = -0.5, alpha.y.1 = -0.5, alpha.y.2 = -0.5, b.prev = -0.5)
init2 <- list(mu.0 = 0.5, alpha.y.1 = 0.5, alpha.y.2 = 0.5, b.prev = 0.5)
init <- list(init1, init2)
# Define the iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model using jags
M4 <- jags(
data = datax,
inits = init,
parameters.to.save = params,
model.file = year_prevalence_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et la trace
M4
traceplot(M4, mfrow=c(2, 3), ask=FALSE)
par(mfrow = c(1, 1))
# On extrait les résultats et on regarde la distribution des paramètres
res <- M4$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
hist(res$b.prev)
# Rétrotransformation
shells <- gopher$Area  * exp(res$mu.0 + res$alpha.y.1 * gopher$Cov.y.1 + res$alpha.y.2 * gopher$Cov.y.2 + res$b.prev * gopher$standprev)
hist(shells)
mean(shells)
# On récupère le DIC
DIC4 <- M4$BUGSoutput$DIC
null_year_site_model <- function(){
# The null model does not take into account any of the variables. We just want to see the evolution of the number of shells
# Likelihood
for (i in 1:N){  # Loop over years
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.y.1 * Cov.y.1[i] + alpha.y.2 * Cov.y.2[i] + alpha.s[site[i]] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
alpha.y.1 ~ dnorm(0, 1/100)
alpha.y.2 ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1/(sigma.s * sigma.s)
sigma.s ~ dunif(0, 100)
}
# Now, we can make list of the data to use in the jags function
datax <- list(
N = gopher$year  %>%
length(),
S = gopher$shells,        # Number of shells
A = gopher$Area,          # Area offset
Cov.y.1 = gopher$Cov.y.1,  # Effect of the year 2005
Cov.y.2 = gopher$Cov.y.2,   # Effect of the year 2006
nb.sites = gopher$Site %>%  # Number of sites
unique() %>%
length(),
site = gopher$Site %>%    # Vector of different sites as different numbers
as.numeric()
)
# Parameters to estimate
params <- c("mu.0", "alpha.y.1", "alpha.y.2", "sigma.s")
# Initialising the chains
init1 <- list(mu.0 = -0.5, alpha.y.1=-0.5, alpha.y.2=-0.5, sigma.s = 0.5)
init2 <- list(mu.0 = 0.5, alpha.y.1=0.5, alpha.y.2=0.5, sigma.s = 0.25)
init <- list(init1, init2)
# Define the iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model using jags
M5 <- jags(
data = datax,
inits = init,
parameters.to.save = params,
model.file = null_year_site_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces
M5
traceplot(M5, mfrow=c(2, 3), ask=FALSE)
par(mfrow = c(1, 1))
# On récupère les paramètres estimés et on regarde leur distribution
res <- M5$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
hist(res$sigma.s)
# Rétrotransformation
simulated_shells <- rep(NA, nrow(res))
for (i in 1:nrow(res)){
lambda <- gopher$Area * exp(res$mu.0[i] + res$alpha.y.1[i] * gopher$Cov.y.1 + res$alpha.y.2[i] * gopher$Cov.y.2 + rnorm(1, mean=0, sd=res$sigma.s[i]))
simulated_shells[i] <- rpois(1, lambda)
}
hist(simulated_shells)
mean(simulated_shells)
# Récupération du DIC
DIC5 <- M5$BUGSoutput$DIC
random_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha.y.1 * Cov.y.1[i] + alpha.y.2 * Cov.y.2[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha.y.1 ~ dnorm(0, 1/100)
alpha.y.2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$standprev,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov.y.1 = ifelse(gopher$year == 2005, 1, 0),
Cov.y.2 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha.y.1", "alpha.y.2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha.y.1" = 0.5,
"alpha.y.2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha.y.1" = -0.5,
"alpha.y.2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M6 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = random_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces
M6
traceplot(M6, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres et on regarde leur distribution
res <- M6$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
hist(res$sd.s)
# Rétrotransformation
simulated_shells <- rep(NA, nrow(res))
for (i in 1:nrow(res)){
lambda <- gopher$Area * exp(res$mu.0[i] + res$alpha.y.1[i] * gopher$Cov.y.1 + res$alpha.y.2[i] * gopher$Cov.y.2 + res$b.prev[i] * gopher$standprev + rnorm(1, mean=0, sd=res$sd.s[i]))
simulated_shells[i] <- rpois(1, lambda)
}
hist(simulated_shells)
mean(simulated_shells)
# Récupérons le DIC
DIC6 <- M6$BUGSoutput$DIC
gopher_discont_prev <-function(){
for (i in 1:N){
S[i] ~ dpois(lambda[i])
logit(lambda[i]) <- mu.0 + b.prev * prev[i] + log(A[i])
}
mu.0 ~ dnorm(0,0.001)
b.prev ~ dnorm(0,0.001)
}
datax <- list(N = length(gopher$shells),
prev = gopher$H,
S = gopher$shells,
A = gopher$Area
)
init1 <- list(mu.0=0.5,b.prev=0.5)
init2 <- list(mu.0= -0.5,b.prev= -0.5)
inits <- list(init1,init2)
params <- c("mu.0","b.prev")
nb.iterations <- 9000
nb.burnin <- 4500
M7 <- jags(data=datax,
inits=inits,
parameters.to.save = params,
model.file=gopher_discont_prev,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin=1)
# Regardons le modèle et les traces
M7
traceplot(M7, mfrow=c(2, 3), ask=FALSE)
par(mfrow = c(1, 1))
# Récupérons les paramètres et regardons leur distribution
res <- M7$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
# Rétrotransformation
shells <- gopher$Area * exp(res$mu.0 + res$b.prev * gopher$H)
hist(shells)
mean(shells)
# Récupérons le DIC
DIC7 <- M7$BUGSoutput$DIC
disc_year_prev_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + b.prev * prev[i] + alpha.y.1 * Cov.y.1[i] + alpha.y.2 * Cov.y.2[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
alpha.y.1 ~ dnorm(0, 1/100)
alpha.y.2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
Cov.y.1 = ifelse(gopher$year == 2005, 1, 0),
Cov.y.2 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "alpha.y.1", "alpha.y.2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"alpha.y.1" = 0.5,
"alpha.y.2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"alpha.y.1" = -0.5,
"alpha.y.2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M8 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_year_prev_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et la trace
M8
traceplot(M8, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres estimés et leur distribution
res <- M8$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
# Calculating the mean number of shells per individual
shells <- gopher$Area * exp(res$mu.0 + res$b.prev * gopher$H + res$alpha.y.1 * gopher$Cov.y.1 + res$alpha.y.2 * gopher$Cov.y.2)
hist(shells)
mean(shells)
# Récupérons le DIC
DIC8 <- M8$BUGSoutput$DIC
disc_full_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha.y.1 * Cov.y.1[i] + alpha.y.2 * Cov.y.2[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha.y.1 ~ dnorm(0, 1/100)
alpha.y.2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$H,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov.y.1 = ifelse(gopher$year == 2005, 1, 0),
Cov.y.2 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha.y.1", "alpha.y.2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha.y.1" = 0.5,
"alpha.y.2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha.y.1" = -0.5,
"alpha.y.2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M9 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = disc_full_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces
M9
traceplot(M9, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# Récupérons les paramètres et regardons leur distribution
res <- M9$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
hist(res$sd.s)
# Rétrotransformation
simulated_shells <- rep(NA, nrow(res))
for (i in 1:nrow(res)){
lambda <- gopher$Area * exp(res$mu.0[i] + res$alpha.y.1[i] * gopher$Cov.y.1 + res$alpha.y.2[i] * gopher$Cov.y.2 + res$b.prev[i] * gopher$H + rnorm(1, mean=0, sd=res$sd.s[i]))
simulated_shells[i] <- rpois(1, lambda)
}
hist(simulated_shells)
mean(simulated_shells)
# Récupérons le DIC
DIC9 <- M9$BUGSoutput$DIC
DICs <- cbind(DIC1, DIC2,
DIC3, DIC4,
DIC5, DIC6,
DIC7, DIC8,
DIC9) %>%
as.data.frame()
View(DICs)
# Rétrotransformation : idée 2
simulated_shells <- gopher$Area * exp(res$mu.0 + res$alpha.y.1 * gopher$Cov.y.1 + res$alpha.y.2 * gopher$Cov.y.2 + res$b.prev * gopher$standprev + rnorm(1, mean=0, sd=res$sd.s))
# Import libraries
require("anyLib")
anyLib(c("tidyverse", "R2jags", "lme4", "cowplot"))
# Set random seed
set.seed(2023)
# Data importation
gopher <- read.csv("gopher.csv", header=TRUE, stringsAsFactors=TRUE, sep=";", dec=".") %>%
mutate(standprev = (prev - mean(prev)) / sd(prev),
H = ifelse(prev <= 25, 0, 1),
Cov.y.1 = ifelse(year == 2005, 1, 0),
Cov.y.2 = ifelse(year == 2006, 1, 0))
random_model <- function(){
# This model takes into account a random effect for the site
# Likelihood
for(i in 1:N){
S[i] ~ dpois(lambda[i])
log(lambda[i]) <- mu.0 + alpha.s[site[i]] + b.prev * prev[i] + alpha.y.1 * Cov.y.1[i] + alpha.y.2 * Cov.y.2[i] + log(A[i])
}
# Priors
mu.0 ~ dnorm(0, 1/100)
b.prev ~ dnorm(0, 1/100)
for (j in 1:nb.sites){
alpha.s[j] ~ dnorm(0, tau.s)
}
tau.s <- 1 / (sd.s * sd.s)
sd.s ~ dunif(0, 100)
alpha.y.1 ~ dnorm(0, 1/100)
alpha.y.2 ~ dnorm(0, 1/100)
}
# Make the data to use in jags
datax <- list(
N = gopher$year %>%
length(),
S = gopher$shells,
prev = gopher$standprev,
A = gopher$Area,
site = gopher$Site %>%
as.numeric(),
nb.sites = gopher$Site %>%
unique() %>%
length(),
Cov.y.1 = ifelse(gopher$year == 2005, 1, 0),
Cov.y.2 = ifelse(gopher$year == 2006, 1, 0)
)
# Make a list of parameters to save
params = c("mu.0", "b.prev", "sd.s", "alpha.y.1", "alpha.y.2")
# Initial conditions
init1 <- list(
"mu.0" = 0.5,
"b.prev" = 0.5,
"sd.s" = 0.5,
"alpha.y.1" = 0.5,
"alpha.y.2" = 0.5
)
init2 <- list(
"mu.0" = - 0.5,
"b.prev" = - 0.5,
"sd.s" =  0.25,
"alpha.y.1" = -0.5,
"alpha.y.2" = -0.5
)
init <- list(init1, init2)
# Iteration parameters
nb.iterations <- 9000
nb.burnin <- 4500
# Run the model
M6 <- jags(
data = datax,
parameters.to.save = params,
inits = init,
model.file = random_model,
n.chains = 2,
n.iter = nb.iterations,
n.burnin = nb.burnin,
n.thin = 1
)
# Regardons le modèle et les traces
M6
traceplot(M6, mfrow=c(2, 3), ask=FALSE)
par(mfrow=c(1, 1))
# On récupère les paramètres et on regarde leur distribution
res <- M6$BUGSoutput$sims.matrix %>%
as.data.frame()
hist(res$b.prev)
hist(res$mu.0)
hist(res$alpha.y.1)
hist(res$alpha.y.2)
hist(res$sd.s)
# Rétrotransformation : idée 1
simulated_shells <- rep(NA, nrow(res))
for (i in 1:nrow(res)){
lambda <- gopher$Area * exp(res$mu.0[i] + res$alpha.y.1[i] * gopher$Cov.y.1 + res$alpha.y.2[i] * gopher$Cov.y.2 + res$b.prev[i] * gopher$standprev + rnorm(1, mean=0, sd=res$sd.s[i]))
simulated_shells[i] <- rpois(1, lambda)
}
hist(simulated_shells)
mean(simulated_shells)
# Rétrotransformation : idée 2
simulated_shells <- gopher$Area * exp(res$mu.0 + res$alpha.y.1 * gopher$Cov.y.1 + res$alpha.y.2 * gopher$Cov.y.2 + res$b.prev * gopher$standprev + rnorm(1, mean=0, sd=res$sd.s))
hist(simulated_shells)
mean(simulated_shells)
# Récupérons le DIC
DIC6 <- M6$BUGSoutput$DIC
